node {
  def gitcommit

  stages {
    stage('Verificacion SCM') {
      steps { // Enclose steps within a 'steps' block
        checkout scm
        sh "git rev-parse --short HEAD > .git/commit-id"
        gitcommit = readFile('.git/commit-id').trim() // Use trim() for consistency
      }
    }

    stage('test') {
      steps {
        def contenedortest = docker.image('node:16.17') // Use a recent Node.js version
        contenedortest.pull()
        contenedortest.inside {
          sh 'npm install --only=dev'
          sh 'npm test'
        }
      }
    }

    stage('Docker Build & Push') {
      steps {
        docker.withRegistry('https://registry.hub.docker.com', 'docker-hub') {
          def nuestraapp = docker.build("mfiordaliso/nodejsapp:${gitcommit}", ".")
          nuestraapp.push()
        }
      }
    }

    stage('Analisis SonarQube') {
      steps {
        def sonarqubeScannerHome = tool name: 'sonarqubeScanner', type: 'sonar-scanner' // Adjust tool name if needed
        withCredentials([string(credentialsId: 'sonar', variable: 'sonarLogin')]) {
          sh "${sonarqubeScannerHome}/bin/sonar-scanner -e -Dsonar.host.url=http://sonarqube:9000 -Dsonar.login=${sonarLogin} -Dsonar.projectName=nodeJS -Dsonar.projectVersion=${env.BUILD_NUMBER}"
        }
      }
    }
  }
}
